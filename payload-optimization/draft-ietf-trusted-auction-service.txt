



Network Working Group                                           D. Kocoj
Internet-Draft                                            B. R. Hamilton
Intended status: Standards Track                                  Google
Expires: 14 March 2025                                 10 September 2024


                        Trusted Auction Service
               draft-ietf-trusted-auction-service-latest

Abstract

   The Trusted Auction Service provides a way for advertising auctions
   to execute in a remote environment while preserving user privacy.

Discussion Venues

   This note is to be removed before publishing as an RFC.

   Source for this draft and an issue tracker can be found at
   https://github.com/privacysandbox/draft-ietf-protected-audience-
   auction-service.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 14 March 2025.

Copyright Notice

   Copyright (c) 2024 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
     1.1.  Scope
     1.2.  Terminology
   2.  Message Format Specifications
     2.1.  Overview
       2.1.1.  Common Definitions
     2.2.  Browser to Trusted Auction Server
       2.2.1.  Request Payload Data
       2.2.2.  Compression
       2.2.3.  Framing and Padding
       2.2.4.  Encryption
       2.2.5.  Payload Optimization
     2.3.  Auction Server
     2.4.  Trusted Auction Server To Browser
       2.4.1.  Decryption
       2.4.2.  Decompression
       2.4.3.  Response Payload Data
   3.  Security Considerations
   4.  IANA Considerations
   5.  Normative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

   Today, real-time bidding and ad auctions are executed on servers that
   may not provide technical guarantees of security.  Some users have
   concerns about how their data is handled to generate relevant ads and
   in how that data is shared.  Protected Audience API (Android
   (https://developer.android.com/design-for-safety/privacy-sandbox/
   fledge), Chrome (https://developer.chrome.com/docs/privacy-sandbox/
   fledge/)) provides ways to preserve privacy and limit third-party
   data sharing by serving personalized ads based on previous mobile app
   or web engagement.

   For all platforms, Protected Audience may require real-time services
   (https://github.com/privacysandbox/fledge-docs/blob/main/
   trusted_services_overview.md).  In the initial proposal by Chrome
   (https://github.com/WICG/turtledove/blob/main/FLEDGE.md), bidding and
   auction for Protected Audience ad demand is executed locally.  This
   can demand computation requirements that may be impractical to
   execute on devices with limited processing power, or may be too slow
   to render ads due to network latency.

   This Trusted Auction Service proposal outlines a way to allow
   Protected Audience computation to take place on cloud servers, rather
   than running locally on a user's device.  Moving computations to the
   cloud has the following benefits:

   *  Scalable auctions.

   *  A scalable ad auction may include several buyers and sellers and
      that can demand more compute resources and network bandwidth.

   *  System health of the user's device.

   *  Ensure better system health of the user's device by freeing up
      computational cycles and network bandwidth.

   *  Better latency of ad auctions.

   *  Server to server communication on the cloud is faster than
      multiple device to server calls.

   *  Adtech code can execute faster on servers with higher computing
      power compared to a device.

   *  Servers have better processing power.

   *  Adtechs can run more compute intensive workloads on a server
      compared to a device for better utility.

   Standardized protocols for interacting with Bidding and Auction
   Services are essential to creating a diverse and healthy ecosystem
   for such services.

1.1.  Scope

   This document provides a specification for the request and response
   message format that a browser can use to communicate with trusted
   remote services that allows the browser to offload much of the work
   involved in running an advertisement selection auction as part of the
   browser's implementation of the Protected Audience API.

   This document does not describe distribution of private keys to
   trusted auction services.

1.2.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

2.  Message Format Specifications

2.1.  Overview

   To understand this document, it is important to know that the
   communication between the browser and the remote servers uses a
   request-response message exchange pattern.  The request will first
   reach a seller server, after which the seller will forward parts of
   the request to buyer servers.  It is then up to the seller server to
   gather buyer responses and form a final response for the browser.
   More detail about the seller and buyer servers can be found in the
   server-side system design documentation
   (https://github.com/privacysandbox/protected-auction-services-
   docs/blob/main/bidding_auction_services_system_design.md).

2.1.1.  Common Definitions

   Section 2 makes frequent use of the following definitions.

        +=========================================+==============+
        | Term with CDDL Definition               | Detailed     |
        |                                         | Reference    |
        +=========================================+==============+
        | json = tstr                             | [JSON]       |
        +-----------------------------------------+--------------+
        | uuid = tstr .regexp "[a-fA-F0-9]{8}-[a- | [RFC9562]    |
        | fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-       |              |
        | F0-9]{4}-[a-fA-F0-9]{12}"               |              |
        +-----------------------------------------+--------------+
        | origin = tstr .regexp                   | [ORIGIN]     |
        | "https://([^/:](:[0-9]+)?/"             |              |
        +-----------------------------------------+--------------+
        | currency = tstr .size 3 .regexp         | [ISO4217]    |
        | /^[A-Z]{3}$/                            |              |
        +-----------------------------------------+--------------+
        | adRenderUrl = tstr                      | [URL]        |
        +-----------------------------------------+--------------+
        | adRenderId = tstr                       | [ADRENDERID] |
        +-----------------------------------------+--------------+
        | interestGroupName = tstr                | TODO         |
        +-----------------------------------------+--------------+
        | interestGroupOwner = origin             | TODO         |
        +-----------------------------------------+--------------+

                                 Table 1

2.2.  Browser to Trusted Auction Server

   This section describes how the browser MUST form request messages in
   order to communicate with the Trusted Auction Server.

2.2.1.  Request Payload Data

   A request payload primarily consists of interest groups.  A list of
   interest group is represented by the following [CDDL]:

   interestGroups = [ * interestGroup ]
   interestGroup = {
     name: interestGroupName,
     ? biddingSignalsKeys: [* tstr],
     ? userBiddingSignals: json,
     ? ads: [* adRenderId],
     ? components: [* adRenderId],
     ? browserSignals: {
       ; Number of times the group was joined in the last 30 days.
       ? joinCount: int,

       ; Number of times the group bid in an auction in the last 30
       ; days.
       ? bidCount: int,

       ; Tuple of time-ad pairs for a previous win for this interest
       ; group that occurred in the last 30 days.
       ; The time is specified in seconds before the containing
       ; auctionBlob was requested.
       ? prevWins: [* [int, adRenderId]],

       ; The most recent join time for this group expressed
       ; in milli seconds before the containing auctionBlob
       ; was requested. This field will be used by newer client
       ; versions. For older devices, the precison will be in seconds.
       ; If recencyMs is present, this value will be used to offer
       ; higher precision. If not, recency will be used. Only
       ; one of the recency or recencyMs is expected to present in
       ; the request.
       ? recencyMs: int
     }
   }

   A list of interest groups for each owner MUST first be represented as
   [CBOR], and then the serialized list MUST be indiviudally compressed
   according to the compression algorithm specified in the message
   framing (Section 2.2.3).  This compressed interest group data MUST
   then be aggregated into a map in the complete request, which MUST be
   [CBOR] represented by the following [CDDL]:

   request = {
     version: int,
     generationId: uuid,
     publisher: origin,
     interestGroups: {
       ; Map of interest group owner to CBOR encoded list of interest
       ; groups compressed using the method described in § Compression.
       * interestGroupOwner => bstr
     },
     ? enableDebugReporting: bool
   }

   The complete request MUST also be compressed using the same
   compression algorithm as specified in the message framing
   (Section 2.2.3).

2.2.2.  Compression

   The payload MAY undergo compression.

   The compression method's value in bits 4-0 in Section 2.2.3
   corresponds to the below table:

                    +=============+==================+
                    | Compression | Description      |
                    +=============+==================+
                    |      0      | No Compression   |
                    +-------------+------------------+
                    |      1      | Brotli [RFC7932] |
                    +-------------+------------------+
                    |      2      | GZIP [RFC1952]   |
                    +-------------+------------------+
                    |     3-31    | Reserved         |
                    +-------------+------------------+

                                 Table 2

2.2.3.  Framing and Padding

   The plaintext message has the following framing:

   +==========+=========+=============+========+=============+=========+
   | Byte     | 0       | 0           | 1 to 4 | 5 to        | Size+5  |
   |          |         |             |        | Size+4      | to end  |
   +==========+=========+=============+========+=============+=========+
   | Bits     | 7-5     | 4-0         | *      | *           | *       |
   +----------+---------+-------------+--------+-------------+---------+
   | Contents | Version | Compression | Size   | Request     | Padding |
   |          |         |             |        | Payload     |         |
   +----------+---------+-------------+--------+-------------+---------+

                                  Table 3

   where the the first 3 bits of the frame header specify the payload
   version and the following 5 bits specify the compression algorithm.
   The format described in this document corresponds to version 0.

   Messages MAY be zero padded so that the encrypted request is one of
   the following bin sizes: 0KiB, 5KiB, 10KiB, 20KiB, 30KiB, 40KiB,
   55KiB.  An implementation MAY need to remove some data from the
   payload to fit inside the largest bucket.

   A compatible implementation processing requests SHOULD NOT rely on a
   specific padding scheme for requests.

2.2.4.  Encryption

   After framing and padding the compressed payload, the entire
   plaintext message is encrypted using HPKE with the encapsulation
   performed according to [OHTTP].

   Since we are repurposing the OHTTP encapsulation mechanism, we are
   required to define new media types (https://www.rfc-editor.org/rfc/
   rfc9458.html#name-repurposing-the-encapsulati):

   *  The OHTTP request media type is “message/auction request”

   *  The OHTTP response media type is “message/auction response”

   Note that these media types are concatenated with other fields when
   creating the HPKE encryption context (https://www.rfc-editor.org/rfc/
   rfc9458.html#name-encapsulation-of-requests), and are not HTTP
   content or media types.

2.2.5.  Payload Optimization

   A compatible implementation MAY support control over how interest
   groups are serialized into a request and the size of the request.  An
   example implementation for this feature is as follows:

   This algorithm takes as input all of the relevant interest groups, an
   optional desired total size, and an optional list of interest group
   owners to include each with an optional desired size.

   1.   If desired total size is not specified, but the list of interest
        group owners includes at least one entry with a specified
        desired size:

        1.  Set desired total size to the sum of all specified desired
            size in the list of interest group owners.

   2.   Group the list of relevant interest groups by owner into a map
        of from interest group owner to a list of interest groups sorted
        by decreasing priority, interest group map.

   3.   If the list of interest group owners is specified, remove
        interest groups whose owner is not on the list.

   4.   Construct a request, request, as normal only with the value of
        the interestGroups field for each interest group owner as zero
        length.

   5.   Set current_size to be the serialized size of the encrypted
        request created from request without padding.

   6.   Set remaining_allocated_size to 0.

   7.   Set remaining_unsized_owners to 0.

   8.   For each interest group owner, interest group list in interest
        group map:

        1.  If there is a desired size for interest group owner:

            1.  Increment remaining_allocated_size by desired size.

        2.  Otherwise

            1.  Increment remaining_unsized_owners by 1.

   9.   For each interest group owner, interest group list in interest
        group map where there is a desired size specified for interest
        group owner:

        1.  If the number of unsized_owners is not 0:

            1.  Set the allowed_interest_group_size to the desired size
                for this interest group owner.  This is a fixed size
                allocation.

        2.  Otherwise:

            1.  Let remaining_size be equal to the desired total size-
                current_size.

            2.  Set the allowed_interest_group_size to
                remaining_size*desired_size/remaining_allocated_size.
                This is a proportional allocation.

        3.  Set remaining_allocated_size = remaining_allocated_size-
            current_size.

        4.  Serialize the interest group list into serialized_group.

        5.  If adding the serialized_group to request would make it more
            than allowed_interest_group_size larger than the current
            size, then remove the lowest priority interest group and
            repeat from the previous step.

        6.  Set request["interestGroups"][interest group owner] to
            serialized_group.

        7.  Set current_size to be the serialized size of the encrypted
            request created from request without padding.

   10.  For each interest group owner, interest group list in interest
        group map where there is not desired size specified for interest
        group owner:

        1.  Let remaining_size be equal to the desired total size-
            current_size.

        2.  Set the allowed_interest_group_size to
            remaining_size*/remaining_unsized_owners.  This is a equal
            size allocation.

        3.  Decrement remaining_unsized_owners by 1.

        4.  Serialize the interest group list into serialized_group.

        5.  If adding the serialized_group to request would make it more
            than allowed_interest_group_size larger than the current
            size, then remove the lowest priority interest group and
            repeat from the previous step.

        6.  Set request["interestGroups"][interest group owner] to
            serialized_group.

        7.  Set current_size to be the serialized size of the encrypted
            request created from request without padding.

   11.  If there are no interest groups in the request, discard the
        request and return an empty byte array.

   12.  Frame request as in Section 2.2.3 and zero pad up to desired
        total size.

   13.  Return the encrypted result (as in Section 2.2.4).

2.3.  Auction Server

   TODO

2.4.  Trusted Auction Server To Browser

   This section describes how the browser MUST interpret response
   messages from the Trusted Auction Server.

2.4.1.  Decryption

   The response message is encrypted using HPKE with the encapsulation
   performed according to [OHTTP] as the response to the request
   message.  See Section 2.2.4 for more details.  The browser MUST
   decrypt the response by following the standard [OHTTP] Encapsulated
   Response decryption procedure (https://www.rfc-editor.org/rfc/
   rfc9458#section-4.4-5).

2.4.2.  Decompression

   The message framing is as in Section 2.2.3, but the entire response
   payload is compressed.  The Server shall zero pad the response
   (TODO).

2.4.3.  Response Payload Data

   The response has the following data, serialized as [CBOR] and
   matching the following shape (described via [CDDL]):

   response = {
     ; The ad to render.
     adRenderURL: adRenderUrl,

     ; List of URLs for component ads displayed as part of this
     ; ad.
     ? components: [* adRenderUrl],

     ; Name of the interest group to which the ad belongs.
     ? interestGroupName: interestGroupName,

     ; Origin of the Buyer who owns the interest group.
     ; The original request for this response MUST contain this
     ; interestGroupOwner, which additionally MUST provide an interest
     ; group with interestGroupName.
     ? interestGroupOwner: interestGroupOwner,

     ; Indices of interest groups in the original request for this owner
     ; that submitted a bid.
     ? biddingGroups: {
       * interestGroupOwner => [* int]
     },

     ; Score of the ad determined during the auction.
     ; Any value that is zero or negative indicates that the ad cannot
     ; win the auction.
     ; The winner of the auction would be the ad that was given the
     ; highest score.
     ? score: float,

     ; Bid price corresponding to an ad
     ? bid: float,

     ; Optional currency of the bid.
     ? bidCurrency: currency,

     ; Optional BuyerReportingId of the winning Ad
     ? buyerReportingId: tstr,

     ; Optional BuyerAndSellerReportingId of the winning Ad
     ? buyerAndSellerReportingId: tstr,

     ; The auction result may be ignored if set to true.
     ? isChaff: bool,

     ? winReportingUrls: {
       ? buyerReportingUrls: reportingUrls,
       ? componentSellerReportingUrls: reportingUrls,
       ? topLevelSellerReportingUrls: reportingUrls
     },

     ? error: {
       code: int,
       message: tstr
     },

     ; Arbitrary metadata to pass to the top-level seller
     ? adMetadata: json,

     ; Optional name/domain for the top-level seller in case this is a
     ; component auction.
     ? topLevelSeller: origin,

     ? kAnonWinnerJoinCandidates: [* KAnonJoinCandidate],

     ; Positional index of the k-anon winner.
     ; Note: Positional index >= 0.
     ; If this is equal to 0, the highest scored bid is also K-Anonymous
     ; and hence a winner.
     ; If this is greater than 0, the positional index implies the index
     ; of the first K-Anonymous scored bid in a sorted list in
     ; decreasing order of scored bids.
     ; In this case, the highest scored bid that is not K-Anonymous is
     ; the ghost winner.
     ; In case all scored bids fail the K-Anonymity constraint, this
     ; would be set to -1 since there is no winner.
     ; In case all scored bids <= 0, this would be set to -1 since
     ; there is no winner.
     ? kAnonWinnerPositionalIndex: int,

     ? kAnonGhostWinners: [* KAnonGhostWinner]
   }

   ; Defines the structure for reporting URLs.
   reportingUrls = {
     ? reportingUrl: tstr,
     ? interactionReportingUrls: { * tstr => tstr }
   }

   ; Join candidates for K-Anonymity
   KAnonJoinCandidate = {
     ; SHA-256 [RFC6234] hash.
     ; Must be computed according to:
     ; https://wicg.github.io/turtledove/#compute-the-key-hash-of-ad
     adRenderUrlHash: tstr,

     ; SHA-256 [RFC6234] hash.
     ; MUST be computed according to:
     ; https://wicg.github.io/turtledove/#compute-the-key-hash-of-component-ad
     ; Note: There is a maximum limit of 40 ad component render urls per
     ; render url.
     ? adComponentRenderUrlsHash: [* tstr],

     ; SHA-256 [RFC6234] hash.
     ; MUST be computed according to:
     ; https://wicg.github.io/turtledove/#compute-the-key-hash-of-reporting-id
     reportingIdHash: tstr
   }

   ; Data for the ghost winner sent back to the client.
   ; This should also include key-hashes corresponding to the ghost
   ; winning ad.
   ; Refer https://wicg.github.io/turtledove/#k-anonymity
   KAnonGhostWinner = {
     ; Join candidates for the K-Anon ghost winner.
     kAnonJoinCandidates: [* KAnonJoinCandidate],

     ; Interest group index of the buyer who generated the ghost winning
     ; bid.
     ? interestGroupIndex: int,

     ; Buyer index who generated the ghost winning bid.
     ? buyerIndex: int,

     ; Origin of the buyer who owns the ghost winner.
     owner: interestGroupOwner,

     ; Private aggregation signals for the ghost winner.
     ; In single seller auctions, this represents a ghost winner if
     ; available.
     ; Note: Event type is "reserved.loss" and bid rejection reason is 8
     ; when the K-Anonymity threshold is not met.
     ? ghostWinnerPrivateAggregationSignals: {
       ; 128-bit integer in bytestring format.
       bucket: bytes,

       value: int
     },

     ; In multi-seller auctions, this data allows scoring the ghost
     ; winning bid during the top-level auction.
     ? ghostWinnerForTopLevelAuction: {
       ; Ad render URL of the ghost winner.
       adRenderUrl: adRenderUrl,

       ; Render URLs for component ads of the main ghost winning ad.
       ? adComponentRenderUrls: [* tstr],

       ; Modified bid price of the ghost winning bid.
       modifiedBid: float,

       ; Optional currency used for the bid price.
       ? bidCurrency: currency,

       ; Arbitrary metadata associated with the ghost winner, passed to
       ; the top-level seller.
       ? adMetadata: json,

       ; BuyerAndSellerReportingId of the ghost winning ad.
       buyerAndSellerReportingId: tstr
     }
   }

3.  Security Considerations

   TODO

4.  IANA Considerations

   This document introduces no additional considerations for IANA.

5.  Normative References

   [ADRENDERID]
              "Protected Audience", 2024, <https://wicg.github.io/
              turtledove/#server-auction-previous-win-ad-render-id>.

   [CBOR]     Bormann, C. and P. Hoffman, "Concise Binary Object
              Representation (CBOR)", STD 94, RFC 8949,
              DOI 10.17487/RFC8949, December 2020,
              <https://www.rfc-editor.org/rfc/rfc8949>.

   [CDDL]     Birkholz, H., Vigano, C., and C. Bormann, "Concise Data
              Definition Language (CDDL): A Notational Convention to
              Express Concise Binary Object Representation (CBOR) and
              JSON Data Structures", RFC 8610, DOI 10.17487/RFC8610,
              June 2019, <https://www.rfc-editor.org/rfc/rfc8610>.

   [ISO4217]  "ISO 4217 Currency codes", 2024,
              <https://www.iso.org/iso-4217-currency-codes.html>.

   [JSON]     Bray, T., Ed., "The JavaScript Object Notation (JSON) Data
              Interchange Format", STD 90, RFC 8259,
              DOI 10.17487/RFC8259, December 2017,
              <https://www.rfc-editor.org/rfc/rfc8259>.

   [OHTTP]    Thomson, M. and C. A. Wood, "Oblivious HTTP", RFC 9458,
              DOI 10.17487/RFC9458, January 2024,
              <https://www.rfc-editor.org/rfc/rfc9458>.

   [ORIGIN]   "HTML Living Standard", 2024,
              <https://html.spec.whatwg.org/multipage/
              webappapis.html#concept-settings-object-origin>.

   [RFC1952]  Deutsch, P., "GZIP file format specification version 4.3",
              RFC 1952, DOI 10.17487/RFC1952, May 1996,
              <https://www.rfc-editor.org/rfc/rfc1952>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC7932]  Alakuijala, J. and Z. Szabadka, "Brotli Compressed Data
              Format", RFC 7932, DOI 10.17487/RFC7932, July 2016,
              <https://www.rfc-editor.org/rfc/rfc7932>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC9562]  Davis, K., Peabody, B., and P. Leach, "Universally Unique
              IDentifiers (UUIDs)", RFC 9562, DOI 10.17487/RFC9562, May
              2024, <https://www.rfc-editor.org/rfc/rfc9562>.

   [SHA-256]  Eastlake 3rd, D. and T. Hansen, "US Secure Hash Algorithms
              (SHA and SHA-based HMAC and HKDF)", RFC 6234,
              DOI 10.17487/RFC6234, May 2011,
              <https://www.rfc-editor.org/rfc/rfc6234>.

   [URL]      "URL Living Standard", 2024,
              <https://url.spec.whatwg.org/#concept-url>.

Acknowledgments

   TODO

Authors' Addresses

   Daniel Kocoj
   Google
   Email: dankocoj@google.com


   Benjamin "Russ" Hamilton
   Google
   Email: behamilton@google.com
